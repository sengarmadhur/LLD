import java.util.*;
import java.util.Map;


public class NewClass{
    public static void main(String[] args) {

        Subscriber s1 = new Subscriber(1, "Ram");


        Subscriber s2 = new Subscriber(2, "Sachin");


        Subscriber s3 = new Subscriber(3, "Mayank");


        IMultiThreadedQueue q = new MultiThreadedQueue();
        Topic t1 = q.cretaeTopic("Topic1", 1);
        Topic t2 = q.cretaeTopic("Topic2", 2);
        Topic t3 = q.cretaeTopic("Topic3", 3);

        q.subscribe(t1, s1);
        q.subscribe(t1, s2);
        q.subscribe(t1, s3);

        q.subscribe(t2, s1);
        q.subscribe(t2, s2);
        q.subscribe(t3, s3);

        q.publish(t1, "Hi I am a message in T1");

    }
}

class Topic {
    int id;
    String name;
    List<Subscriber> subscribers;

    public Topic(int i, String name) {
        id = i;
        this.name = name;
        subscribers = new ArrayList<>();
    }

    public void addSubscriber(Subscriber s) {
        subscribers.add(s);
        System.out.println("Subscriber " + s.name + " added in topic: " + name);
    }
}

class Subscriber {
    int id;
    String name;
    List<Topic> subscriptions;

    public Subscriber(int i, String name) {
        this.id = i;
        this.name = name;
    }

    public void consume(String message) {
        System.out.println("Consumed message: " + message );
    }

    public void addSubscription(Topic t) {
        subscriptions.add(t);
        System.out.println("Subscription fonr got subscriber:" + id + " topic:" + t.name);
    }
}

class SubscriberWorker implements Runnable {
    Subscriber subscriber;
    Queue<String> messages;

    public SubscriberWorker(Subscriber s) {
        this.subscriber = s;
        messages = new LinkedList<>();
    }
    public void run() {
        System.out.println("I am thread " + Thread.currentThread().getName() + " for subscriber " + subscriber.name);
        synchronized(this) {
            while(true) {
                if (messages.isEmpty()) {
                    try {
                        System.out.println(Thread.currentThread().getName() + " for subscriber " + subscriber.name + " is waiting");
                        wait();
                        System.out.println(Thread.currentThread().getName() + " for subscriber " + subscriber.name + " is released");

                    } catch(Exception e) {

                    }
                }
                String message = messages.poll();
                subscriber.consume(message);

            }
        }
    }

    public void startWorker(String message) {
        messages.add(message);
        synchronized(this) {
            notifyAll();
        }
    }
}


interface IMultiThreadedQueue{
    void publish(Topic t, String message);
    Topic cretaeTopic(String name, int id);
    void subscribe(Topic t, Subscriber s);
}

class MultiThreadedQueue implements  IMultiThreadedQueue {
    Map<Topic, List<Subscriber>> topicSubscriberMap;
    Map<Subscriber, SubscriberWorker> subscriberWorkerMap;
    Map<Topic, List<String>>  topicMessageMap;

    public MultiThreadedQueue() {
        topicMessageMap = new HashMap<>();
        topicSubscriberMap = new HashMap<>();
        subscriberWorkerMap = new HashMap<>();
    }

    @Override
    public void publish(Topic t, String message) {
        List<Subscriber> subscriberList = topicSubscriberMap.get(t);
        for( Subscriber s: subscriberList) {
            SubscriberWorker worker = subscriberWorkerMap.get(s);
            worker.startWorker(message);
        }
        System.out.println("Message published: " + message + " in Topic: " + t);
    }

    @Override
    public Topic cretaeTopic(String name, int id) {
        Topic t = new Topic(id, name);
        topicMessageMap.put(t, new ArrayList<>());
        topicSubscriberMap.put(t, new ArrayList<>());
        System.out.println("Topic created: " + t);
        return  t;
    }

    @Override
    public void subscribe(Topic t, Subscriber s) {
        if (subscriberWorkerMap.containsKey(s)) {
            List<Subscriber> subscriberList = topicSubscriberMap.get(t);
            subscriberList.add(s);
            topicSubscriberMap.put(t, subscriberList);
        } else {
            SubscriberWorker subscriberWorker = new SubscriberWorker(s);
            Thread t1 = new Thread(subscriberWorker);
            t1.start();
            subscriberWorkerMap.put(s, subscriberWorker);
            List<Subscriber> subscriberList = topicSubscriberMap.get(t);
            subscriberList.add(s);
            topicSubscriberMap.put(t, subscriberList);
        }
        System.out.println("Subscription doen for " + t + " subscriber " + s.name);
    }
}

