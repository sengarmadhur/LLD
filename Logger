/*
    Logger
    different levels-> INFO, DEBUG, ERROR
    
    Chain of Responsibility(to handle different level of logging) + Singleton is good
*/

public class Main {

  public static void main (String[] args){
    Logger logger = new InfoLogger(new DebugLogger(new ErrorLogger(null, 3),2),1);
    logger.logMessage("abcd", 1);
    logger.logMessage("abcd", 2);
    logger.logMessage("abcd", 3);
    logger.logMessage("abcd", 4);
  }
}


abstract class Logger {
    public static int INFO = 1;
    public static int DEBUG = 2;
    public static int ERROR = 3;
    protected int logLevel;
    protected Logger nextLogger;
    protected abstract void logMessage(String message, int level);
}

class InfoLogger extends Logger{
    public InfoLogger(Logger logger, int level) {
        this.nextLogger = logger;
        this.logLevel = level;
    }
    
    @Override
    protected void logMessage(String message, int level) {
        if (this.logLevel == level) {
            System.out.println("INFO: " + message);
        } else if (nextLogger != null) {
            nextLogger.logMessage(message, level);
        } else {
            System.out.println("Incorrect level: " + level);
        }
    }
}

class ErrorLogger extends Logger {
    public ErrorLogger(Logger logger, int level) {
        this.nextLogger = logger;
        this.logLevel = level;
    }
    
    @Override
    protected void logMessage(String message, int level) {
        if (this.logLevel == level) {
            System.out.println("ERROR: " + message);
        } else if (nextLogger != null) {
            nextLogger.logMessage(message, level);
        } else {
            System.out.println("Incorrect level: " + level);
        }
    }
}

class DebugLogger extends Logger {
    public DebugLogger(Logger logger, int level) {
        this.nextLogger = logger;
        this.logLevel = level;
    }
    
    @Override
    protected void logMessage(String message, int level) {
        if (this.logLevel == level) {
            System.out.println("DEBUG: " + message);
        } else if (nextLogger != null) {
            nextLogger.logMessage(message, level);
        } else {
            System.out.println("Incorrect level: " + level);
        }
    }
}
